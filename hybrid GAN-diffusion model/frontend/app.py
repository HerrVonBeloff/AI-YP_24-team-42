import streamlit as st
import pandas as pd
from PIL import Image
from io import BytesIO
import random
import matplotlib.pyplot as plt
from wordcloud import WordCloud
import plotly.express as px
from typing import Optional

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state ---
if 'generated_images' not in st.session_state:
    st.session_state.generated_images = []
if 'selected_idx' not in st.session_state:
    st.session_state.selected_idx = None
if 'final_image' not in st.session_state:
    st.session_state.final_image = None
if 'eda_clicked' not in st.session_state:
    st.session_state.eda_clicked = False
if 'dataset_for_EDA' not in st.session_state:
    st.session_state.dataset_for_EDA = None
if 'info_clicked' not in st.session_state:
    st.session_state.info_clicked = False

st.set_page_config(page_title="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ—Ç–∏–ø–æ–≤", layout="wide")
st.title("üé® –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ª–æ–≥–æ—Ç–∏–ø–æ–≤")  

label = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: EcoTech")

if st.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã") and label:
    with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤..."):
        base_images = generate_cgan_images(label, count=5)
        upscaled_images = [upscale_image(img, label) for img in base_images]
        st.session_state.generated_images = [img for img in upscaled_images if img is not None]
        st.session_state.label = label
        st.session_state.selected_idx = None
        st.session_state.final_image = None

if st.session_state.generated_images:
    st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è –≤–∞—Ä–∏–∞–Ω—Ç:")
    cols = st.columns(5)
    for idx, col in enumerate(cols):
        if idx < len(st.session_state.generated_images):
            image_path = st.session_state.generated_images[idx]
            with col:
                if st.button(f"–í—ã–±—Ä–∞—Ç—å ‚Ññ{idx + 1}", key=f"select_{idx}"):
                    st.session_state.selected_idx = idx
                st.image(
                    image_path,
                    caption=f"–®–∞–±–ª–æ–Ω ‚Ññ{idx + 1}",
                    width=150  # <-- –ó–¥–µ—Å—å –∑–∞–¥–∞—ë–º —Ä–∞–∑–º–µ—Ä
                )

    if st.session_state.selected_idx is not None:
        selected_img = st.session_state.generated_images[st.session_state.selected_idx]
        st.success(f"–í—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç #{st.session_state.selected_idx+1}")

        with st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", expanded=True):
            strength = st.slider("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏", 0.3, 0.9, 0.7, 0.05)
            steps = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤", 10, 100, 30, 5)
            guidance = st.slider("–ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç–∏–ª—è", 7.0, 20.0, 13.0, 0.5)

            # –í—ã–±–æ—Ä LoRA —Å—Ç–∏–ª—è
            available_loras = get_available_loras()
            lora_options = ["–ù–µ—Ç"] + available_loras
            selected_lora = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ LoRA —Å—Ç–∏–ª—å", lora_options)

        if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å"):
            with st.spinner("–°—Ç–∏–ª–∏–∑–∞—Ü–∏—è..."):
                final_path = style_with_diffusion(
                    selected_img,
                    st.session_state.label,
                    strength,
                    steps,
                    guidance,
                    selected_lora if selected_lora != "–ù–µ—Ç" else None
                )
                st.session_state.final_image = final_path

        if st.session_state.final_image:
            st.markdown("###  –§–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø")
            st.image(
                st.session_state.final_image,
                caption=" –í–∞—à —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø",
                width=512  # <-- –∑–¥–µ—Å—å –∑–∞–¥–∞—ë–º –Ω—É–∂–Ω—ã–π —Ä–∞–∑–º–µ—Ä
            )
            with open(st.session_state.final_image, "rb") as f:
                st.download_button(
                    "üì• –°–∫–∞—á–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø",
                    data=f,
                    file_name=f"{st.session_state.label}_logo.png",
                    mime="image/png"
                )

st.title("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏")

themes = [
    "plotly",
    "ggplot2",
    "seaborn",
    "simple_white",
    "presentation",
    "streamlit",
]

def dataset_to_eda(df):
    dataset_transform = pd.DataFrame()
    dataset_transform["epitets_num"] = df["text"].apply(lambda x: len(x.split(",")[1:]))
    dataset_transform["description"] = df["text"].apply(lambda x: ",".join(x.split(",")[1:]))
    dataset_transform["len"] = df["text"].apply(lambda x: len(x))
    dataset_transform["shape"] = df["image"].apply(lambda x: np.array(x).shape)
    dataset_transform["h"] = df["image"].apply(lambda x: np.array(x).shape[0])
    dataset_transform["w"] = df["image"].apply(lambda x: np.array(x).shape[1])
    dataset_transform["rgb"] = df["image"].apply(
        lambda x: "RGB" if len(np.array(x).shape) == 3 else "BW"
    )
    dataset_transform["ratio"] = dataset_transform["shape"].apply(lambda x: x[0] / x[1])
    dataset_transform["pixel"] = dataset_transform["shape"].apply(lambda x: np.prod(x))
    return dataset_transform

with st.expander("–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
    if st.button("–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"):
        st.session_state.info_clicked = True
    if st.session_state.info_clicked:
        st.header("–ö—Ä–∞—Ç–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞")
        st.markdown(
            f"1. cGAN –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è<br>"
            f"   ‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: 4-—Å–ª–æ–π–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è CNN (100D —à—É–º + 128D —Ç–µ–∫—Å—Ç–æ–≤—ã–π —ç–º–±–µ–¥–¥–∏–Ω–≥)<br>"
            f"   ‚Ä¢ –û–±—É—á–µ–Ω–∏–µ: 15 —ç–ø–æ—Ö, –º–µ—Ç—Ä–∏–∫–∞ FID<br>"
            f"2. Real-ESRGAN –ø–æ–≤—ã—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (4x –∞–ø—Å–∫–µ–π–ª)<br>"
            f"3. Stable Diffusion 1.5 —Å LoRA-–∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é:<br>"
            f"   ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 512x512<br>"
            f"   ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ç–∏–ª–µ–π —á–µ—Ä–µ–∑ LoRA<br>"
            f"   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏<br>"
            f"<a href='https://github.com/HerrVonBeloff/AI-YP_24-team-42'>üîó  –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π GitHub</a>", 
            unsafe_allow_html=True
        )

        st.header("–ü—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è cGAN")
        theme_model = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤", sorted(themes), key="theme_selector1"
        )
        try:
            df_loss = pd.read_csv("loss_long.csv")
            df_metric = pd.read_csv("metric.csv")
        except Exception as e:
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å CSV —Ñ–∞–π–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Ö –Ω–∞–ª–∏—á–∏–µ.")
            df_loss = pd.DataFrame()
            df_metric = pd.DataFrame()

        if not df_loss.empty:
            fig = px.line(
                df_loss,
                x="Epoch",
                y="Loss Value",
                color="Loss Type",
                title="–ü–æ—Ç–µ—Ä–∏",
                template=theme_model
            )
            fig.update_layout(
                xaxis=dict(showgrid=True),
                yaxis=dict(showgrid=True),
                title=dict(x=0.4)
            )
            fig.update_layout(
                xaxis_title="–≠–ø–æ—Ö–∏",
                yaxis_title="–ó–Ω–∞—á–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å",
                legend=dict(title="–ù–µ–π—Ä–æ—Å–µ—Ç—å")
            )
            fig.update_traces(name="–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ç–æ—Ä", selector=dict(name="D_loss"))
            fig.update_traces(name="–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", selector=dict(name="G_loss"))
            st.plotly_chart(fig)

        st.header("–ú–µ—Ç—Ä–∏–∫–∞ FID")
        if not df_metric.empty:
            fig = px.line(
                df_metric,
                x="Epoch",
                y="FID score",
                title="–ú–µ—Ç—Ä–∏–∫–∞ FID",
                template=theme_model
            )
            fig.update_layout(
                bargap=0.1,
                xaxis=dict(showgrid=True),
                yaxis=dict(showgrid=True),
                title=dict(x=0.4)
            )
            fig.update_layout(
                xaxis_title="–≠–ø–æ—Ö–∏",
                yaxis_title="–ó–Ω–∞—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏",
            )
            st.plotly_chart(fig)

with st.expander("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
    st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    example = {
        "image": ["{'bytes': b'\\x89PNG\\x1a'}"],
        "text": ["Simple elegant logo for Concept, love orange ..."]
    }
    example_df = pd.DataFrame(example)
    example_df.index = range(456, 457)
    st.markdown("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –¥–∞—Ç–∞—Å–µ—Ç—É")
    st.write(example_df)
    example_dataset_url = "https://drive.google.com/file/d/1BiUi9TOVgIjEggFQHb9d49Dp-z0pgIvI/view?usp=sharing"
    st.markdown(
        "–§–æ—Ä–º–∞—Ç `parquet`. "
        "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ –±–∞–π—Ç–æ–≤–æ–º –≤–∏–¥–µ –≤–Ω—É—Ç—Ä–∏ —Å–ª–æ–≤–∞—Ä—è, "
        "—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –≤ –≤–∏–¥–µ –æ–±—ã—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º —ç–ø–∏—Ç–µ—Ç–æ–≤. "
        f"[üîó –ü—Ä–∏–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞]({example_dataset_url})"
    )
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞—Ç–∞—Å–µ—Ç (.parquet)", type=["parquet"])
    if uploaded_file is not None:
        try:
            dataset = pd.read_parquet(uploaded_file)
            dataset["image"] = dataset["image"].apply(
                lambda x: Image.open(BytesIO(x.get("bytes")))
            )
            st.markdown(
                f'<span style="color:gray">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ: </span>{len(dataset)}',
                unsafe_allow_html=True
            )
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")

    if uploaded_file is not None:
        try:
            dataset = pd.read_parquet(uploaded_file)
            dataset["image"] = dataset["image"].apply(
                lambda x: Image.open(BytesIO(x.get("bytes")))
            )
            st.session_state.dataset = dataset
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

with st.expander("–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
    if st.button("–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞"):
        ind = random.randint(0, len(dataset) - 1) if len(dataset) > 0 else 0
        st.session_state.index = ind
        st.session_state.dataset_image = dataset.iloc[ind]["image"]
        st.session_state.dataset_text = dataset.iloc[ind]["text"]

    if "dataset_image" in st.session_state:
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.image(
                st.session_state.dataset_image,
                caption=f"–õ–æ–≥–æ—Ç–∏–ø –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–∞: –∏–Ω–¥–µ–∫—Å {st.session_state.index}",
            )
        st.markdown(
            f'<span style="color:gray">–¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞: </span>{st.session_state.dataset_text}',
            unsafe_allow_html=True
        )

with st.expander("EDA: —Å–≤–µ—Ä–Ω—É—Ç—å/—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å", expanded=True):
    if st.button("EDA"):
        st.session_state.eda_clicked = True
        try:
            dataset_for_eda = dataset_to_eda(dataset)
            st.session_state.dataset_for_EDA = dataset_for_eda
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")

    if st.session_state.eda_clicked:
        if st.session_state.dataset_for_EDA is not None:
            data = st.session_state.dataset_for_EDA
            st.title("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            st.subheader("–û–±–ª–∞–∫–æ —Å–ª–æ–≤")
            if "word_cloud" not in st.session_state:
                wc = WordCloud(background_color="black", width=1000, height=500)
                words = data["description"].explode().values
                wc.generate(" ".join(words))
                fig, ax = plt.subplots(1, 1, figsize=(20, 10))
                ax.axis("off")
                ax.set_title("–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏–π –ª–æ–≥–æ—Ç–∏–ø–æ–≤", fontsize=30)
                ax.imshow(wc, alpha=0.98)
                st.session_state.word_cloud = fig
            st.pyplot(st.session_state.word_cloud)

            theme = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤", sorted(themes), key="theme_selector"
            )

            st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π")
            bins = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_description"
            )
            bin_edges = np.linspace(data["len"].min(), data["len"].max(), bins + 1)
            fig = px.histogram(
                data,
                x="len",
                nbins=bins,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π",
                template=theme
            )
            fig.update_traces(
                xbins=dict(
                    start=bin_edges[0],
                    end=bin_edges[-1],
                    size=(bin_edges[1] - bin_edges[0]),
                ),
            )
            fig.update_layout(
                bargap=0.1,
                xaxis=dict(showgrid=True),
                yaxis=dict(showgrid=True),
                title=dict(x=0.4)
            )
            fig.update_layout(
                xaxis_title="–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
            )
            st.plotly_chart(fig)

            st.subheader("Boxplot –¥–ª—è –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π")
            fig = px.box(data, x="len", template=theme)
            fig.update_layout(
                title=dict(text="Boxplot –¥–ª–∏–Ω –æ–ø–∏—Å–∞–Ω–∏–π", x=0.4),
                xaxis=dict(showgrid=True, title="–î–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è –≤ —Å–∏–º–≤–æ–ª–∞—Ö"),
            )
            st.plotly_chart(fig)

            st.subheader("–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏—Ç–µ—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏*")
            st.write("*–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –∏ —Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–π, –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            bins6 = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_epitets_num"
            )
            bin_edges6 = np.linspace(
                data["epitets_num"].min(), data["epitets_num"].max(), bins6 + 1
            )
            fig = px.histogram(
                data,
                x="epitets_num",
                nbins=bins6,
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
                template=theme
            )
            fig.update_traces(
                xbins=dict(
                    start=bin_edges6[0],
                    end=bin_edges6[-1],
                    size=(bin_edges6[1] - bin_edges6[0]),
                ),
            )
            fig.update_layout(
                bargap=0.1,
                xaxis=dict(showgrid=True),
                yaxis=dict(showgrid=True),
                title=dict(x=0.4)
            )
            fig.update_layout(
                xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
            )
            st.plotly_chart(fig)

            st.subheader("Boxplot –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ø–∏—Ç–µ—Ç–æ–≤")
            fig = px.box(data, x="epitets_num", template=theme)
            fig.update_layout(
                title=dict(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏", x=0.4),
                xaxis=dict(showgrid=True, title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–∏—Ç–µ—Ç–æ–≤"),
            )
            st.plotly_chart(fig)

            st.title("–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            value_counts = data["rgb"].value_counts()
            pie_data = pd.DataFrame({
                "Value": ["RGB", "BW"],
                "Count": [
                    value_counts.get("RGB", 0),
                    value_counts.get("BW", 0)
                ]
            })
            st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ RGB –∏ —á—ë—Ä–Ω–æ-–±–µ–ª—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤")
            fig = px.pie(pie_data, names="Value", values="Count", template=theme)
            fig.update_layout(title=dict(text="–¢–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", x=0.4))
            st.plotly_chart(fig)

            st.subheader("–í—ã—Å–æ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            bins1 = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_height"
            )
            bin_edges1 = np.linspace(data["h"].min(), data["h"].max(), bins1 + 1)
            fig = px.histogram(
                data,
                x="h",
                nbins=bins1,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                template=theme
            )
            fig.update_layout(
                xaxis_title="–í—ã—Å–æ—Ç–∞",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                title=dict(x=0.4)
            )
            fig.update_traces(
                xbins=dict(
                    start=bin_edges1[0],
                    end=bin_edges1[-1],
                    size=(bin_edges1[1] - bin_edges1[0]),
                ),
            )
            st.plotly_chart(fig)

            st.subheader("–®–∏—Ä–∏–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            bins2 = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_wight"
            )
            bin_edges2 = np.linspace(data["w"].min(), data["w"].max(), bins2 + 1)
            fig = px.histogram(
                data,
                x="w",
                nbins=bins2,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
                template=theme
            )
            fig.update_layout(
                xaxis_title="–®–∏—Ä–∏–Ω–∞",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                title=dict(x=0.4)
            )
            fig.update_traces(
                xbins=dict(
                    start=bin_edges2[0],
                    end=bin_edges2[-1],
                    size=(bin_edges2[1] - bin_edges2[0]),
                ),
            )
            st.plotly_chart(fig)

            st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω")
            bins3 = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_ratio"
            )
            bin_edges3 = np.linspace(data["ratio"].min(), data["ratio"].max(), bins3 + 1)
            fig = px.histogram(
                data,
                x="ratio",
                nbins=bins3,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω h/w",
                template=theme
            )
            fig.update_layout(
                xaxis_title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                title=dict(x=0.4)
            )
            fig.update_traces(
                xbins=dict(
                    start=bin_edges3[0],
                    end=bin_edges3[-1],
                    size=(bin_edges3[1] - bin_edges3[0]),
                ),
            )
            st.plotly_chart(fig)

            st.subheader("–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (–±–µ–∑ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö)")
            filtered_data = data[data["ratio"] != 1]["ratio"]
            if not filtered_data.empty:
                bins4 = st.slider(
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_ratio1"
                )
                bin_edges4 = np.linspace(filtered_data.min(), filtered_data.max(), bins4 + 1)
                fig = px.histogram(
                    filtered_data,
                    x="ratio",
                    nbins=bins4,
                    title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å—Ç–æ—Ä–æ–Ω h/w",
                    template=theme
                )
                fig.update_layout(
                    xaxis_title="–°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω",
                    yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                    title=dict(x=0.4)
                )
                fig.update_traces(
                    xbins=dict(
                        start=bin_edges4[0],
                        end=bin_edges4[-1],
                        size=(bin_edges4[1] - bin_edges4[0]),
                    ),
                )
                st.plotly_chart(fig)

            st.subheader("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π")
            bins5 = st.slider(
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ (bins)", 5, 50, 10, key="bins_pixel"
            )
            bin_edges5 = np.linspace(data["pixel"].min(), data["pixel"].max(), bins5 + 1)
            fig = px.histogram(
                data,
                x="pixel",
                nbins=bins5,
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏–∫—Å–µ–ª–µ–π",
                template=theme
            )
            fig.update_layout(
                xaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–∫—Å–µ–ª–µ–π",
                yaxis_title="–ß–∞—Å—Ç–æ—Ç–∞",
                title=dict(x=0.4)
            )
            fig.update_traces(
                xbins=dict(
                    start=bin_edges5[0],
                    end=bin_edges5[-1],
                    size=(bin_edges5[1] - bin_edges5[0]),
                ),
            )
            st.plotly_chart(fig)
